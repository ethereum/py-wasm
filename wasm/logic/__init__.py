from typing import (
    TYPE_CHECKING,
    Callable,
    Dict,
)

from wasm.opcodes import (
    BinaryOpcode,
)

from . import (
    control,
    memory,
    numeric,
    parametric,
    variable,
)

if TYPE_CHECKING:
    from wasm.execution import (  # noqa:
        Configuration,
    )


OPCODE_TO_LOGIC_FN: Dict[BinaryOpcode, Callable[['Configuration'], None]] = {
    BinaryOpcode.UNREACHABLE: control.unreachable_op,
    BinaryOpcode.NOP: control.nop_op,
    BinaryOpcode.BLOCK: control.block_op,
    BinaryOpcode.LOOP: control.loop_op,
    BinaryOpcode.IF: control.if_op,
    BinaryOpcode.ELSE: control.else_op,
    BinaryOpcode.END: control.end_op,
    BinaryOpcode.BR: control.br_op,
    BinaryOpcode.BR_IF: control.br_if_op,
    BinaryOpcode.BR_TABLE: control.br_table_op,
    BinaryOpcode.RETURN: control.return_op,
    BinaryOpcode.CALL: control.call_op,
    BinaryOpcode.CALL_INDIRECT: control.call_indirect_op,
    BinaryOpcode.DROP: parametric.drop_op,
    BinaryOpcode.SELECT: parametric.select_op,
    BinaryOpcode.GET_LOCAL: variable.get_local_op,
    BinaryOpcode.SET_LOCAL: variable.set_local_op,
    BinaryOpcode.TEE_LOCAL: variable.tee_local_op,
    BinaryOpcode.GET_GLOBAL: variable.get_global_op,
    BinaryOpcode.SET_GLOBAL: variable.set_global_op,
    BinaryOpcode.I32_LOAD: memory.load_op,
    BinaryOpcode.I64_LOAD: memory.load_op,
    BinaryOpcode.F32_LOAD: memory.load_op,
    BinaryOpcode.F64_LOAD: memory.load_op,
    BinaryOpcode.I32_LOAD8_S: memory.load_op,
    BinaryOpcode.I32_LOAD8_U: memory.load_op,
    BinaryOpcode.I32_LOAD16_S: memory.load_op,
    BinaryOpcode.I32_LOAD16_U: memory.load_op,
    BinaryOpcode.I64_LOAD8_S: memory.load_op,
    BinaryOpcode.I64_LOAD8_U: memory.load_op,
    BinaryOpcode.I64_LOAD16_S: memory.load_op,
    BinaryOpcode.I64_LOAD16_U: memory.load_op,
    BinaryOpcode.I64_LOAD32_S: memory.load_op,
    BinaryOpcode.I64_LOAD32_U: memory.load_op,
    BinaryOpcode.I32_STORE: memory.store_op,
    BinaryOpcode.I64_STORE: memory.store_op,
    BinaryOpcode.F32_STORE: memory.store_op,
    BinaryOpcode.F64_STORE: memory.store_op,
    BinaryOpcode.I32_STORE8: memory.store_op,
    BinaryOpcode.I32_STORE16: memory.store_op,
    BinaryOpcode.I64_STORE8: memory.store_op,
    BinaryOpcode.I64_STORE16: memory.store_op,
    BinaryOpcode.I64_STORE32: memory.store_op,
    BinaryOpcode.MEMORY_SIZE: memory.memory_size_op,
    BinaryOpcode.MEMORY_GROW: memory.memory_grow_op,
    BinaryOpcode.I32_CONST: numeric.const_op,
    BinaryOpcode.I64_CONST: numeric.const_op,
    BinaryOpcode.F32_CONST: numeric.const_op,
    BinaryOpcode.F64_CONST: numeric.const_op,
    BinaryOpcode.I32_EQZ: numeric.ieqz_op,
    BinaryOpcode.I32_EQ: numeric.eq_op,
    BinaryOpcode.I32_NE: numeric.ne_op,
    BinaryOpcode.I32_LT_S: numeric.iXX_lts_op,
    BinaryOpcode.I32_LT_U: numeric.iltu_op,
    BinaryOpcode.I32_GT_S: numeric.iXX_gts_op,
    BinaryOpcode.I32_GT_U: numeric.igtu_op,
    BinaryOpcode.I32_LE_S: numeric.iXX_les_op,
    BinaryOpcode.I32_LE_U: numeric.ileu_op,
    BinaryOpcode.I32_GE_S: numeric.iXX_ges_op,
    BinaryOpcode.I32_GE_U: numeric.igeu_op,
    BinaryOpcode.I64_EQZ: numeric.ieqz_op,
    BinaryOpcode.I64_EQ: numeric.eq_op,
    BinaryOpcode.I64_NE: numeric.ne_op,
    BinaryOpcode.I64_LT_S: numeric.iXX_lts_op,
    BinaryOpcode.I64_LT_U: numeric.iltu_op,
    BinaryOpcode.I64_GT_S: numeric.iXX_gts_op,
    BinaryOpcode.I64_GT_U: numeric.igtu_op,
    BinaryOpcode.I64_LE_S: numeric.iXX_les_op,
    BinaryOpcode.I64_LE_U: numeric.ileu_op,
    BinaryOpcode.I64_GE_S: numeric.iXX_ges_op,
    BinaryOpcode.I64_GE_U: numeric.igeu_op,
    BinaryOpcode.F32_EQ: numeric.eq_op,
    BinaryOpcode.F32_NE: numeric.ne_op,
    BinaryOpcode.F32_LT: numeric.flt_op,
    BinaryOpcode.F32_GT: numeric.fgt_op,
    BinaryOpcode.F32_LE: numeric.fle_op,
    BinaryOpcode.F32_GE: numeric.fge_op,
    BinaryOpcode.F64_EQ: numeric.eq_op,
    BinaryOpcode.F64_NE: numeric.ne_op,
    BinaryOpcode.F64_LT: numeric.flt_op,
    BinaryOpcode.F64_GT: numeric.fgt_op,
    BinaryOpcode.F64_LE: numeric.fle_op,
    BinaryOpcode.F64_GE: numeric.fge_op,
    BinaryOpcode.I32_CLZ: numeric.iXX_clz_op,
    BinaryOpcode.I32_CTZ: numeric.iXX_ctz_op,
    BinaryOpcode.I32_POPCNT: numeric.ipopcnt_op,
    BinaryOpcode.I32_ADD: numeric.iXX_add_op,
    BinaryOpcode.I32_SUB: numeric.iXX_sub_op,
    BinaryOpcode.I32_MUL: numeric.iXX_mul_op,
    BinaryOpcode.I32_DIV_S: numeric.iXX_divs_op,
    BinaryOpcode.I32_DIV_U: numeric.idivu_op,
    BinaryOpcode.I32_REM_S: numeric.iXX_rems_op,
    BinaryOpcode.I32_REM_U: numeric.iremu_op,
    BinaryOpcode.I32_AND: numeric.iand_op,
    BinaryOpcode.I32_OR: numeric.ior_op,
    BinaryOpcode.I32_XOR: numeric.ixor_op,
    BinaryOpcode.I32_SHL: numeric.iXX_shl_op,
    BinaryOpcode.I32_SHR_S: numeric.iXX_shr_sXX_op,
    BinaryOpcode.I32_SHR_U: numeric.iXX_shr_sXX_op,
    BinaryOpcode.I32_ROTL: numeric.iXX_rotl_op,
    BinaryOpcode.I32_ROTR: numeric.iXX_rotr_op,
    BinaryOpcode.I64_CLZ: numeric.iXX_clz_op,
    BinaryOpcode.I64_CTZ: numeric.iXX_ctz_op,
    BinaryOpcode.I64_POPCNT: numeric.ipopcnt_op,
    BinaryOpcode.I64_ADD: numeric.iXX_add_op,
    BinaryOpcode.I64_SUB: numeric.iXX_sub_op,
    BinaryOpcode.I64_MUL: numeric.iXX_mul_op,
    BinaryOpcode.I64_DIV_S: numeric.iXX_divs_op,
    BinaryOpcode.I64_DIV_U: numeric.idivu_op,
    BinaryOpcode.I64_REM_S: numeric.iXX_rems_op,
    BinaryOpcode.I64_REM_U: numeric.iremu_op,
    BinaryOpcode.I64_AND: numeric.iand_op,
    BinaryOpcode.I64_OR: numeric.ior_op,
    BinaryOpcode.I64_XOR: numeric.ixor_op,
    BinaryOpcode.I64_SHL: numeric.iXX_shl_op,
    BinaryOpcode.I64_SHR_S: numeric.iXX_shr_sXX_op,
    BinaryOpcode.I64_SHR_U: numeric.iXX_shr_sXX_op,
    BinaryOpcode.I64_ROTL: numeric.iXX_rotl_op,
    BinaryOpcode.I64_ROTR: numeric.iXX_rotr_op,
    BinaryOpcode.F32_ABS: numeric.fabs_op,
    BinaryOpcode.F32_NEG: numeric.fneg_op,
    BinaryOpcode.F32_CEIL: numeric.fceil_op,
    BinaryOpcode.F32_FLOOR: numeric.ffloor_op,
    BinaryOpcode.F32_TRUNC: numeric.ftrunc_op,
    BinaryOpcode.F32_NEAREST: numeric.fnearest_op,
    BinaryOpcode.F32_SQRT: numeric.fsqrt_op,
    BinaryOpcode.F32_ADD: numeric.fadd_op,
    BinaryOpcode.F32_SUB: numeric.fsub_op,
    BinaryOpcode.F32_MUL: numeric.fmul_op,
    BinaryOpcode.F32_DIV: numeric.fdiv_op,
    BinaryOpcode.F32_MIN: numeric.fmin_op,
    BinaryOpcode.F32_MAX: numeric.fmax_op,
    BinaryOpcode.F32_COPYSIGN: numeric.fcopysign_op,
    BinaryOpcode.F64_ABS: numeric.fabs_op,
    BinaryOpcode.F64_NEG: numeric.fneg_op,
    BinaryOpcode.F64_CEIL: numeric.fceil_op,
    BinaryOpcode.F64_FLOOR: numeric.ffloor_op,
    BinaryOpcode.F64_TRUNC: numeric.ftrunc_op,
    BinaryOpcode.F64_NEAREST: numeric.fnearest_op,
    BinaryOpcode.F64_SQRT: numeric.fsqrt_op,
    BinaryOpcode.F64_ADD: numeric.fadd_op,
    BinaryOpcode.F64_SUB: numeric.fsub_op,
    BinaryOpcode.F64_MUL: numeric.fmul_op,
    BinaryOpcode.F64_DIV: numeric.fdiv_op,
    BinaryOpcode.F64_MIN: numeric.fmin_op,
    BinaryOpcode.F64_MAX: numeric.fmax_op,
    BinaryOpcode.F64_COPYSIGN: numeric.fcopysign_op,
    BinaryOpcode.I32_WRAP_I64: numeric.iwrap64_op,
    BinaryOpcode.I32_TRUNC_S_F32: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I32_TRUNC_U_F32: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I32_TRUNC_S_F64: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I32_TRUNC_U_F64: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I64_EXTEND_S_I32: numeric.i64extend_usX_op,
    BinaryOpcode.I64_EXTEND_U_I32: numeric.i64extend_usX_op,
    BinaryOpcode.I64_TRUNC_S_F32: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I64_TRUNC_U_F32: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I64_TRUNC_S_F64: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.I64_TRUNC_U_F64: numeric.iXX_trunc_usX_fXX_op,
    BinaryOpcode.F32_CONVERT_S_I32: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F32_CONVERT_U_I32: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F32_CONVERT_S_I64: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F32_CONVERT_U_I64: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F32_DEMOTE_F64: numeric.f32demote_op,
    BinaryOpcode.F64_CONVERT_S_I32: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F64_CONVERT_U_I32: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F64_CONVERT_S_I64: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F64_CONVERT_U_I64: numeric.fXX_convert_usX_iXX_op,
    BinaryOpcode.F64_PROMOTE_F32: numeric.f64promote_op,
    BinaryOpcode.I32_REINTERPRET_F32: numeric.XXX_reinterpret_XXX_op,
    BinaryOpcode.I64_REINTERPRET_F64: numeric.XXX_reinterpret_XXX_op,
    BinaryOpcode.F32_REINTERPRET_I32: numeric.XXX_reinterpret_XXX_op,
    BinaryOpcode.F64_REINTERPRET_I64: numeric.XXX_reinterpret_XXX_op,
}
